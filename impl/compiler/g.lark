%import common.INT
%import common.NEWLINE -> _NL
%import common.CNAME -> IDENTIFIER 

%ignore " "
%ignore "\t"

COMMENT: "//"/[^\n]/*
%ignore COMMENT

?start: statement_list

// Used only for global scope
?statement_list: (statement | _NL)+

// Used for child lexical scopes, starts a new lexical scope
statement_block: statement_list

?statement: expression
		  | variable_declaration
		  | assignment
		  | if_chain
		  | match_stmt
		  | while_stmt
		  | for_stmt
		  | struct_stmt
		  | enum_stmt
		  | print_stmt
		  | index_assignment
		  | function_definition
		  | return_stmt
		  | for_stmt_int

variable_declaration: "let" IDENTIFIER "=" expression

assignment: IDENTIFIER "=" expression
index_assignment : variable "[" POS_DIGIT "]" "=" expression

print_stmt: "print" expression 

if_chain: if_stmt [else_if_ladder] [else_block]
if_stmt: "if" expression "{" statement_block "}"
else_if_ladder: else_if_stmt+
else_if_stmt: "elif" expression "{" statement_block "}"
?else_block: "else" "{" statement_block "}"

match_stmt: "match" expression "{" case_ladder "}"
case_ladder: (case_stmt | _NL)+
case_stmt: "case" match_pattern "{" statement_block "}"
?match_pattern: bool_literal | enum_literal_simple | wildcard_pattern | array_pattern

wildcard_pattern: "_"

while_stmt: "while" expression "{" statement_block "}"

for_stmt: "for" IDENTIFIER "in" expression "{" statement_block "}"

for_stmt_int: "for" IDENTIFIER "in" int_literal ".." int_literal "{" statement_block "}"

struct_stmt: "struct" IDENTIFIER "{" struct_members "}"
struct_members: (struct_member | _NL)+
struct_member: IDENTIFIER ":" type_annotation

enum_stmt: "enum" IDENTIFIER "{" enum_members "}"
enum_members: (enum_member_bare | enum_member_tuple | _NL)+
enum_member_bare: IDENTIFIER
enum_member_tuple: IDENTIFIER "(" type_annotation ")"
// generics_definition: "<" IDENTIFIER ("," IDENTIFIER)* ">"

function_definition: "fn" IDENTIFIER "(" [function_params] ")" "->" type_annotation "{" statement_block "}"
function_params: function_param ("," function_param)*
function_param: IDENTIFIER ":" type_annotation

type_annotation: IDENTIFIER ["<" type_annotation ">"]

return_stmt: "return" expression

?expression: equality

?!equality: logical ( "==" | "!=" ) equality
	 | logical

?!logical: comparison ( "&&" | "||" ) logical
	 | comparison

?!comparison: term ( ">" | "<" | "<=" | ">=") comparison
	 | term

?!term: factor ("+" | "-" ) term
	 | factor

?!factor: unary_op
	    | unary_op ("*" | "/" | "%") factor

?!unary_op: ("+" | "-" | "!") unary_op
		  | indexing

?indexing: function_call "[" POS_DIGIT "]"
		| function_call

POS_DIGIT: /[0-9]+/

?function_call: atom "(" [function_args | struct_init_members] ")"
	   | atom
function_args: expression ("," expression)*

?atom: bool_literal
	 | int_literal
	 | string_literal
	 | array_literal
	 | enum_literal_simple
	 | "(" expression ")"
	 | variable
	
struct_init_members: struct_init_member ("," struct_init_member)*
struct_init_member: IDENTIFIER "=" expression

bool_literal: TRUE | FALSE
TRUE: "true"
FALSE: "false"

int_literal: INT

string_literal: STRING
STRING: "\"" /.*?/ "\""

enum_literal_simple: IDENTIFIER "::" IDENTIFIER

variable: IDENTIFIER

array_literal: ["<" type_annotation ">"] "[" [array_elements] "]"
array_elements: array_element ("," array_element)*
array_element: expression

array_pattern: "[" (array_pattern_element ("," array_pattern_element)*)? "]"
array_pattern_element: int_literal | wildcard_pattern
