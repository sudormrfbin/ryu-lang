# serializer version: 1
# name: test_addition_3_ints
  dict({
    <class 'compiler.ast.Term'>: dict({
      'left': dict({
        <class 'compiler.ast.IntLiteral'>: dict({
          'value': 1,
        }),
      }),
      'op': Token('PLUS', '+'),
      'right': dict({
        <class 'compiler.ast.Term'>: dict({
          'left': dict({
            <class 'compiler.ast.IntLiteral'>: dict({
              'value': 2,
            }),
          }),
          'op': Token('PLUS', '+'),
          'right': dict({
            <class 'compiler.ast.IntLiteral'>: dict({
              'value': 6,
            }),
          }),
        }),
      }),
    }),
  })
# ---
# name: test_addition_3_ints.1
  dict({
    'left': dict({
      <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
    }),
    'right': dict({
      'left': dict({
        <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
      }),
      'right': dict({
        <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
      }),
      <class 'compiler.ast.Term'>: <class 'compiler.langtypes.Int'>,
    }),
    <class 'compiler.ast.Term'>: <class 'compiler.langtypes.Int'>,
  })
# ---
# name: test_addition_with_negative_int_both
  dict({
    <class 'compiler.ast.Term'>: dict({
      'left': dict({
        <class 'compiler.ast.UnaryOp'>: dict({
          'op': Token('MINUS', '-'),
          'operand': dict({
            <class 'compiler.ast.IntLiteral'>: dict({
              'value': 1,
            }),
          }),
        }),
      }),
      'op': Token('PLUS', '+'),
      'right': dict({
        <class 'compiler.ast.UnaryOp'>: dict({
          'op': Token('MINUS', '-'),
          'operand': dict({
            <class 'compiler.ast.IntLiteral'>: dict({
              'value': 2,
            }),
          }),
        }),
      }),
    }),
  })
# ---
# name: test_addition_with_negative_int_both.1
  dict({
    'left': dict({
      'operand': dict({
        <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
      }),
      <class 'compiler.ast.UnaryOp'>: <class 'compiler.langtypes.Int'>,
    }),
    'right': dict({
      'operand': dict({
        <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
      }),
      <class 'compiler.ast.UnaryOp'>: <class 'compiler.langtypes.Int'>,
    }),
    <class 'compiler.ast.Term'>: <class 'compiler.langtypes.Int'>,
  })
# ---
# name: test_addition_with_negative_int_left
  dict({
    <class 'compiler.ast.Term'>: dict({
      'left': dict({
        <class 'compiler.ast.UnaryOp'>: dict({
          'op': Token('MINUS', '-'),
          'operand': dict({
            <class 'compiler.ast.IntLiteral'>: dict({
              'value': 1,
            }),
          }),
        }),
      }),
      'op': Token('PLUS', '+'),
      'right': dict({
        <class 'compiler.ast.IntLiteral'>: dict({
          'value': 2,
        }),
      }),
    }),
  })
# ---
# name: test_addition_with_negative_int_left.1
  dict({
    'left': dict({
      'operand': dict({
        <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
      }),
      <class 'compiler.ast.UnaryOp'>: <class 'compiler.langtypes.Int'>,
    }),
    'right': dict({
      <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
    }),
    <class 'compiler.ast.Term'>: <class 'compiler.langtypes.Int'>,
  })
# ---
# name: test_addition_with_negative_int_right
  dict({
    <class 'compiler.ast.Term'>: dict({
      'left': dict({
        <class 'compiler.ast.IntLiteral'>: dict({
          'value': 1,
        }),
      }),
      'op': Token('PLUS', '+'),
      'right': dict({
        <class 'compiler.ast.UnaryOp'>: dict({
          'op': Token('MINUS', '-'),
          'operand': dict({
            <class 'compiler.ast.IntLiteral'>: dict({
              'value': 2,
            }),
          }),
        }),
      }),
    }),
  })
# ---
# name: test_addition_with_negative_int_right.1
  dict({
    'left': dict({
      <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
    }),
    'right': dict({
      'operand': dict({
        <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
      }),
      <class 'compiler.ast.UnaryOp'>: <class 'compiler.langtypes.Int'>,
    }),
    <class 'compiler.ast.Term'>: <class 'compiler.langtypes.Int'>,
  })
# ---
# name: test_addition_with_positive_int
  dict({
    <class 'compiler.ast.Term'>: dict({
      'left': dict({
        <class 'compiler.ast.IntLiteral'>: dict({
          'value': 1,
        }),
      }),
      'op': Token('PLUS', '+'),
      'right': dict({
        <class 'compiler.ast.IntLiteral'>: dict({
          'value': 2,
        }),
      }),
    }),
  })
# ---
# name: test_addition_with_positive_int.1
  dict({
    'left': dict({
      <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
    }),
    'right': dict({
      <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
    }),
    <class 'compiler.ast.Term'>: <class 'compiler.langtypes.Int'>,
  })
# ---
# name: test_and_false_and_false
  dict({
    <class 'compiler.ast.Logical'>: dict({
      'left': dict({
        <class 'compiler.ast.BoolLiteral'>: dict({
          'value': False,
        }),
      }),
      'op': Token('__ANON_5', '&&'),
      'right': dict({
        <class 'compiler.ast.BoolLiteral'>: dict({
          'value': False,
        }),
      }),
    }),
  })
# ---
# name: test_and_false_and_false.1
  dict({
    'left': dict({
      <class 'compiler.ast.BoolLiteral'>: <class 'compiler.langtypes.Bool'>,
    }),
    'right': dict({
      <class 'compiler.ast.BoolLiteral'>: <class 'compiler.langtypes.Bool'>,
    }),
    <class 'compiler.ast.Logical'>: <class 'compiler.langtypes.Bool'>,
  })
# ---
# name: test_and_false_and_true
  dict({
    <class 'compiler.ast.Logical'>: dict({
      'left': dict({
        <class 'compiler.ast.BoolLiteral'>: dict({
          'value': False,
        }),
      }),
      'op': Token('__ANON_5', '&&'),
      'right': dict({
        <class 'compiler.ast.BoolLiteral'>: dict({
          'value': True,
        }),
      }),
    }),
  })
# ---
# name: test_and_false_and_true.1
  dict({
    'left': dict({
      <class 'compiler.ast.BoolLiteral'>: <class 'compiler.langtypes.Bool'>,
    }),
    'right': dict({
      <class 'compiler.ast.BoolLiteral'>: <class 'compiler.langtypes.Bool'>,
    }),
    <class 'compiler.ast.Logical'>: <class 'compiler.langtypes.Bool'>,
  })
# ---
# name: test_and_false_or_false
  dict({
    <class 'compiler.ast.Logical'>: dict({
      'left': dict({
        <class 'compiler.ast.BoolLiteral'>: dict({
          'value': False,
        }),
      }),
      'op': Token('__ANON_6', '||'),
      'right': dict({
        <class 'compiler.ast.BoolLiteral'>: dict({
          'value': False,
        }),
      }),
    }),
  })
# ---
# name: test_and_false_or_false.1
  dict({
    'left': dict({
      <class 'compiler.ast.BoolLiteral'>: <class 'compiler.langtypes.Bool'>,
    }),
    'right': dict({
      <class 'compiler.ast.BoolLiteral'>: <class 'compiler.langtypes.Bool'>,
    }),
    <class 'compiler.ast.Logical'>: <class 'compiler.langtypes.Bool'>,
  })
# ---
# name: test_and_false_or_true
  dict({
    <class 'compiler.ast.Logical'>: dict({
      'left': dict({
        <class 'compiler.ast.BoolLiteral'>: dict({
          'value': False,
        }),
      }),
      'op': Token('__ANON_6', '||'),
      'right': dict({
        <class 'compiler.ast.BoolLiteral'>: dict({
          'value': True,
        }),
      }),
    }),
  })
# ---
# name: test_and_false_or_true.1
  dict({
    'left': dict({
      <class 'compiler.ast.BoolLiteral'>: <class 'compiler.langtypes.Bool'>,
    }),
    'right': dict({
      <class 'compiler.ast.BoolLiteral'>: <class 'compiler.langtypes.Bool'>,
    }),
    <class 'compiler.ast.Logical'>: <class 'compiler.langtypes.Bool'>,
  })
# ---
# name: test_and_true_and_false
  dict({
    <class 'compiler.ast.Logical'>: dict({
      'left': dict({
        <class 'compiler.ast.BoolLiteral'>: dict({
          'value': True,
        }),
      }),
      'op': Token('__ANON_5', '&&'),
      'right': dict({
        <class 'compiler.ast.BoolLiteral'>: dict({
          'value': False,
        }),
      }),
    }),
  })
# ---
# name: test_and_true_and_false.1
  dict({
    'left': dict({
      <class 'compiler.ast.BoolLiteral'>: <class 'compiler.langtypes.Bool'>,
    }),
    'right': dict({
      <class 'compiler.ast.BoolLiteral'>: <class 'compiler.langtypes.Bool'>,
    }),
    <class 'compiler.ast.Logical'>: <class 'compiler.langtypes.Bool'>,
  })
# ---
# name: test_and_true_and_true
  dict({
    <class 'compiler.ast.Logical'>: dict({
      'left': dict({
        <class 'compiler.ast.BoolLiteral'>: dict({
          'value': True,
        }),
      }),
      'op': Token('__ANON_5', '&&'),
      'right': dict({
        <class 'compiler.ast.BoolLiteral'>: dict({
          'value': True,
        }),
      }),
    }),
  })
# ---
# name: test_and_true_and_true.1
  dict({
    'left': dict({
      <class 'compiler.ast.BoolLiteral'>: <class 'compiler.langtypes.Bool'>,
    }),
    'right': dict({
      <class 'compiler.ast.BoolLiteral'>: <class 'compiler.langtypes.Bool'>,
    }),
    <class 'compiler.ast.Logical'>: <class 'compiler.langtypes.Bool'>,
  })
# ---
# name: test_and_true_or_false
  dict({
    <class 'compiler.ast.Logical'>: dict({
      'left': dict({
        <class 'compiler.ast.BoolLiteral'>: dict({
          'value': True,
        }),
      }),
      'op': Token('__ANON_6', '||'),
      'right': dict({
        <class 'compiler.ast.BoolLiteral'>: dict({
          'value': False,
        }),
      }),
    }),
  })
# ---
# name: test_and_true_or_false.1
  dict({
    'left': dict({
      <class 'compiler.ast.BoolLiteral'>: <class 'compiler.langtypes.Bool'>,
    }),
    'right': dict({
      <class 'compiler.ast.BoolLiteral'>: <class 'compiler.langtypes.Bool'>,
    }),
    <class 'compiler.ast.Logical'>: <class 'compiler.langtypes.Bool'>,
  })
# ---
# name: test_and_true_or_true
  dict({
    <class 'compiler.ast.Logical'>: dict({
      'left': dict({
        <class 'compiler.ast.BoolLiteral'>: dict({
          'value': True,
        }),
      }),
      'op': Token('__ANON_6', '||'),
      'right': dict({
        <class 'compiler.ast.BoolLiteral'>: dict({
          'value': True,
        }),
      }),
    }),
  })
# ---
# name: test_and_true_or_true.1
  dict({
    'left': dict({
      <class 'compiler.ast.BoolLiteral'>: <class 'compiler.langtypes.Bool'>,
    }),
    'right': dict({
      <class 'compiler.ast.BoolLiteral'>: <class 'compiler.langtypes.Bool'>,
    }),
    <class 'compiler.ast.Logical'>: <class 'compiler.langtypes.Bool'>,
  })
# ---
# name: test_division_with_negative_int_both
  dict({
    <class 'compiler.ast.Factor'>: dict({
      'left': dict({
        <class 'compiler.ast.UnaryOp'>: dict({
          'op': Token('MINUS', '-'),
          'operand': dict({
            <class 'compiler.ast.IntLiteral'>: dict({
              'value': 4,
            }),
          }),
        }),
      }),
      'op': Token('SLASH', '/'),
      'right': dict({
        <class 'compiler.ast.UnaryOp'>: dict({
          'op': Token('MINUS', '-'),
          'operand': dict({
            <class 'compiler.ast.IntLiteral'>: dict({
              'value': 2,
            }),
          }),
        }),
      }),
    }),
  })
# ---
# name: test_division_with_negative_int_both.1
  dict({
    'left': dict({
      'operand': dict({
        <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
      }),
      <class 'compiler.ast.UnaryOp'>: <class 'compiler.langtypes.Int'>,
    }),
    'right': dict({
      'operand': dict({
        <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
      }),
      <class 'compiler.ast.UnaryOp'>: <class 'compiler.langtypes.Int'>,
    }),
    <class 'compiler.ast.Factor'>: <class 'compiler.langtypes.Int'>,
  })
# ---
# name: test_division_with_negative_int_left
  dict({
    <class 'compiler.ast.Factor'>: dict({
      'left': dict({
        <class 'compiler.ast.UnaryOp'>: dict({
          'op': Token('MINUS', '-'),
          'operand': dict({
            <class 'compiler.ast.IntLiteral'>: dict({
              'value': 4,
            }),
          }),
        }),
      }),
      'op': Token('SLASH', '/'),
      'right': dict({
        <class 'compiler.ast.IntLiteral'>: dict({
          'value': 2,
        }),
      }),
    }),
  })
# ---
# name: test_division_with_negative_int_left.1
  dict({
    'left': dict({
      'operand': dict({
        <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
      }),
      <class 'compiler.ast.UnaryOp'>: <class 'compiler.langtypes.Int'>,
    }),
    'right': dict({
      <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
    }),
    <class 'compiler.ast.Factor'>: <class 'compiler.langtypes.Int'>,
  })
# ---
# name: test_division_with_negative_int_right
  dict({
    <class 'compiler.ast.Factor'>: dict({
      'left': dict({
        <class 'compiler.ast.IntLiteral'>: dict({
          'value': 4,
        }),
      }),
      'op': Token('SLASH', '/'),
      'right': dict({
        <class 'compiler.ast.UnaryOp'>: dict({
          'op': Token('MINUS', '-'),
          'operand': dict({
            <class 'compiler.ast.IntLiteral'>: dict({
              'value': 2,
            }),
          }),
        }),
      }),
    }),
  })
# ---
# name: test_division_with_negative_int_right.1
  dict({
    'left': dict({
      <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
    }),
    'right': dict({
      'operand': dict({
        <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
      }),
      <class 'compiler.ast.UnaryOp'>: <class 'compiler.langtypes.Int'>,
    }),
    <class 'compiler.ast.Factor'>: <class 'compiler.langtypes.Int'>,
  })
# ---
# name: test_division_with_positive_int
  dict({
    <class 'compiler.ast.Factor'>: dict({
      'left': dict({
        <class 'compiler.ast.IntLiteral'>: dict({
          'value': 4,
        }),
      }),
      'op': Token('SLASH', '/'),
      'right': dict({
        <class 'compiler.ast.IntLiteral'>: dict({
          'value': 2,
        }),
      }),
    }),
  })
# ---
# name: test_division_with_positive_int.1
  dict({
    'left': dict({
      <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
    }),
    'right': dict({
      <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
    }),
    <class 'compiler.ast.Factor'>: <class 'compiler.langtypes.Int'>,
  })
# ---
# name: test_eqeq_diffnum
  dict({
    <class 'compiler.ast.Equality'>: dict({
      'left': dict({
        <class 'compiler.ast.IntLiteral'>: dict({
          'value': 3,
        }),
      }),
      'op': Token('__ANON_3', '=='),
      'right': dict({
        <class 'compiler.ast.IntLiteral'>: dict({
          'value': 4,
        }),
      }),
    }),
  })
# ---
# name: test_eqeq_diffnum.1
  dict({
    'left': dict({
      <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
    }),
    'right': dict({
      <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
    }),
    <class 'compiler.ast.Equality'>: <class 'compiler.langtypes.Bool'>,
  })
# ---
# name: test_eqeq_samenum
  dict({
    <class 'compiler.ast.Equality'>: dict({
      'left': dict({
        <class 'compiler.ast.IntLiteral'>: dict({
          'value': 3,
        }),
      }),
      'op': Token('__ANON_3', '=='),
      'right': dict({
        <class 'compiler.ast.IntLiteral'>: dict({
          'value': 3,
        }),
      }),
    }),
  })
# ---
# name: test_eqeq_samenum.1
  dict({
    'left': dict({
      <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
    }),
    'right': dict({
      <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
    }),
    <class 'compiler.ast.Equality'>: <class 'compiler.langtypes.Bool'>,
  })
# ---
# name: test_greaterthan_largernum_gt_smallernum
  dict({
    <class 'compiler.ast.Comparison'>: dict({
      'left': dict({
        <class 'compiler.ast.IntLiteral'>: dict({
          'value': 5,
        }),
      }),
      'op': Token('MORETHAN', '>'),
      'right': dict({
        <class 'compiler.ast.IntLiteral'>: dict({
          'value': 3,
        }),
      }),
    }),
  })
# ---
# name: test_greaterthan_largernum_gt_smallernum.1
  dict({
    'left': dict({
      <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
    }),
    'right': dict({
      <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
    }),
    <class 'compiler.ast.Comparison'>: <class 'compiler.langtypes.Bool'>,
  })
# ---
# name: test_greaterthan_smallernum_gt_largernum
  dict({
    <class 'compiler.ast.Comparison'>: dict({
      'left': dict({
        <class 'compiler.ast.IntLiteral'>: dict({
          'value': 3,
        }),
      }),
      'op': Token('MORETHAN', '>'),
      'right': dict({
        <class 'compiler.ast.IntLiteral'>: dict({
          'value': 5,
        }),
      }),
    }),
  })
# ---
# name: test_greaterthan_smallernum_gt_largernum.1
  dict({
    'left': dict({
      <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
    }),
    'right': dict({
      <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
    }),
    <class 'compiler.ast.Comparison'>: <class 'compiler.langtypes.Bool'>,
  })
# ---
# name: test_gtq_largernum_gtq_smallernum
  dict({
    <class 'compiler.ast.Comparison'>: dict({
      'left': dict({
        <class 'compiler.ast.IntLiteral'>: dict({
          'value': 5,
        }),
      }),
      'op': Token('__ANON_8', '>='),
      'right': dict({
        <class 'compiler.ast.IntLiteral'>: dict({
          'value': 3,
        }),
      }),
    }),
  })
# ---
# name: test_gtq_largernum_gtq_smallernum.1
  dict({
    'left': dict({
      <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
    }),
    'right': dict({
      <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
    }),
    <class 'compiler.ast.Comparison'>: <class 'compiler.langtypes.Bool'>,
  })
# ---
# name: test_gtq_samenum_gtq_samenum
  dict({
    <class 'compiler.ast.Comparison'>: dict({
      'left': dict({
        <class 'compiler.ast.IntLiteral'>: dict({
          'value': 3,
        }),
      }),
      'op': Token('__ANON_8', '>='),
      'right': dict({
        <class 'compiler.ast.IntLiteral'>: dict({
          'value': 3,
        }),
      }),
    }),
  })
# ---
# name: test_gtq_samenum_gtq_samenum.1
  dict({
    'left': dict({
      <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
    }),
    'right': dict({
      <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
    }),
    <class 'compiler.ast.Comparison'>: <class 'compiler.langtypes.Bool'>,
  })
# ---
# name: test_gtq_smallernum_gtq_largernum
  dict({
    <class 'compiler.ast.Comparison'>: dict({
      'left': dict({
        <class 'compiler.ast.IntLiteral'>: dict({
          'value': 3,
        }),
      }),
      'op': Token('__ANON_8', '>='),
      'right': dict({
        <class 'compiler.ast.IntLiteral'>: dict({
          'value': 5,
        }),
      }),
    }),
  })
# ---
# name: test_gtq_smallernum_gtq_largernum.1
  dict({
    'left': dict({
      <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
    }),
    'right': dict({
      <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
    }),
    <class 'compiler.ast.Comparison'>: <class 'compiler.langtypes.Bool'>,
  })
# ---
# name: test_lesserthan_largernum_lt_smallernum
  dict({
    <class 'compiler.ast.Comparison'>: dict({
      'left': dict({
        <class 'compiler.ast.IntLiteral'>: dict({
          'value': 5,
        }),
      }),
      'op': Token('LESSTHAN', '<'),
      'right': dict({
        <class 'compiler.ast.IntLiteral'>: dict({
          'value': 3,
        }),
      }),
    }),
  })
# ---
# name: test_lesserthan_largernum_lt_smallernum.1
  dict({
    'left': dict({
      <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
    }),
    'right': dict({
      <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
    }),
    <class 'compiler.ast.Comparison'>: <class 'compiler.langtypes.Bool'>,
  })
# ---
# name: test_lesserthan_smallernum_lt_largernum
  dict({
    <class 'compiler.ast.Comparison'>: dict({
      'left': dict({
        <class 'compiler.ast.IntLiteral'>: dict({
          'value': 3,
        }),
      }),
      'op': Token('LESSTHAN', '<'),
      'right': dict({
        <class 'compiler.ast.IntLiteral'>: dict({
          'value': 5,
        }),
      }),
    }),
  })
# ---
# name: test_lesserthan_smallernum_lt_largernum.1
  dict({
    'left': dict({
      <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
    }),
    'right': dict({
      <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
    }),
    <class 'compiler.ast.Comparison'>: <class 'compiler.langtypes.Bool'>,
  })
# ---
# name: test_ltq_largernum_ltq_smallernum
  dict({
    <class 'compiler.ast.Comparison'>: dict({
      'left': dict({
        <class 'compiler.ast.IntLiteral'>: dict({
          'value': 5,
        }),
      }),
      'op': Token('__ANON_7', '<='),
      'right': dict({
        <class 'compiler.ast.IntLiteral'>: dict({
          'value': 3,
        }),
      }),
    }),
  })
# ---
# name: test_ltq_largernum_ltq_smallernum.1
  dict({
    'left': dict({
      <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
    }),
    'right': dict({
      <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
    }),
    <class 'compiler.ast.Comparison'>: <class 'compiler.langtypes.Bool'>,
  })
# ---
# name: test_ltq_samenum_ltq_samenum
  dict({
    <class 'compiler.ast.Comparison'>: dict({
      'left': dict({
        <class 'compiler.ast.IntLiteral'>: dict({
          'value': 3,
        }),
      }),
      'op': Token('__ANON_7', '<='),
      'right': dict({
        <class 'compiler.ast.IntLiteral'>: dict({
          'value': 3,
        }),
      }),
    }),
  })
# ---
# name: test_ltq_samenum_ltq_samenum.1
  dict({
    'left': dict({
      <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
    }),
    'right': dict({
      <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
    }),
    <class 'compiler.ast.Comparison'>: <class 'compiler.langtypes.Bool'>,
  })
# ---
# name: test_ltq_smallernum_ltq_largernum
  dict({
    <class 'compiler.ast.Comparison'>: dict({
      'left': dict({
        <class 'compiler.ast.IntLiteral'>: dict({
          'value': 3,
        }),
      }),
      'op': Token('__ANON_7', '<='),
      'right': dict({
        <class 'compiler.ast.IntLiteral'>: dict({
          'value': 5,
        }),
      }),
    }),
  })
# ---
# name: test_ltq_smallernum_ltq_largernum.1
  dict({
    'left': dict({
      <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
    }),
    'right': dict({
      <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
    }),
    <class 'compiler.ast.Comparison'>: <class 'compiler.langtypes.Bool'>,
  })
# ---
# name: test_modulus_with_negative_int_both
  dict({
    <class 'compiler.ast.Factor'>: dict({
      'left': dict({
        <class 'compiler.ast.UnaryOp'>: dict({
          'op': Token('MINUS', '-'),
          'operand': dict({
            <class 'compiler.ast.IntLiteral'>: dict({
              'value': 8,
            }),
          }),
        }),
      }),
      'op': Token('PERCENT', '%'),
      'right': dict({
        <class 'compiler.ast.UnaryOp'>: dict({
          'op': Token('MINUS', '-'),
          'operand': dict({
            <class 'compiler.ast.IntLiteral'>: dict({
              'value': 2,
            }),
          }),
        }),
      }),
    }),
  })
# ---
# name: test_modulus_with_negative_int_both.1
  dict({
    'left': dict({
      'operand': dict({
        <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
      }),
      <class 'compiler.ast.UnaryOp'>: <class 'compiler.langtypes.Int'>,
    }),
    'right': dict({
      'operand': dict({
        <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
      }),
      <class 'compiler.ast.UnaryOp'>: <class 'compiler.langtypes.Int'>,
    }),
    <class 'compiler.ast.Factor'>: <class 'compiler.langtypes.Int'>,
  })
# ---
# name: test_modulus_with_negative_int_left
  dict({
    <class 'compiler.ast.Factor'>: dict({
      'left': dict({
        <class 'compiler.ast.UnaryOp'>: dict({
          'op': Token('MINUS', '-'),
          'operand': dict({
            <class 'compiler.ast.IntLiteral'>: dict({
              'value': 7,
            }),
          }),
        }),
      }),
      'op': Token('PERCENT', '%'),
      'right': dict({
        <class 'compiler.ast.IntLiteral'>: dict({
          'value': 2,
        }),
      }),
    }),
  })
# ---
# name: test_modulus_with_negative_int_left.1
  dict({
    'left': dict({
      'operand': dict({
        <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
      }),
      <class 'compiler.ast.UnaryOp'>: <class 'compiler.langtypes.Int'>,
    }),
    'right': dict({
      <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
    }),
    <class 'compiler.ast.Factor'>: <class 'compiler.langtypes.Int'>,
  })
# ---
# name: test_modulus_with_negative_int_right
  dict({
    <class 'compiler.ast.Factor'>: dict({
      'left': dict({
        <class 'compiler.ast.IntLiteral'>: dict({
          'value': 7,
        }),
      }),
      'op': Token('PERCENT', '%'),
      'right': dict({
        <class 'compiler.ast.UnaryOp'>: dict({
          'op': Token('MINUS', '-'),
          'operand': dict({
            <class 'compiler.ast.IntLiteral'>: dict({
              'value': 2,
            }),
          }),
        }),
      }),
    }),
  })
# ---
# name: test_modulus_with_negative_int_right.1
  dict({
    'left': dict({
      <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
    }),
    'right': dict({
      'operand': dict({
        <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
      }),
      <class 'compiler.ast.UnaryOp'>: <class 'compiler.langtypes.Int'>,
    }),
    <class 'compiler.ast.Factor'>: <class 'compiler.langtypes.Int'>,
  })
# ---
# name: test_modulus_with_positive_int
  dict({
    <class 'compiler.ast.Factor'>: dict({
      'left': dict({
        <class 'compiler.ast.IntLiteral'>: dict({
          'value': 4,
        }),
      }),
      'op': Token('PERCENT', '%'),
      'right': dict({
        <class 'compiler.ast.IntLiteral'>: dict({
          'value': 2,
        }),
      }),
    }),
  })
# ---
# name: test_modulus_with_positive_int.1
  dict({
    'left': dict({
      <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
    }),
    'right': dict({
      <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
    }),
    <class 'compiler.ast.Factor'>: <class 'compiler.langtypes.Int'>,
  })
# ---
# name: test_multiplication_with_negative_int_both
  dict({
    <class 'compiler.ast.Factor'>: dict({
      'left': dict({
        <class 'compiler.ast.UnaryOp'>: dict({
          'op': Token('MINUS', '-'),
          'operand': dict({
            <class 'compiler.ast.IntLiteral'>: dict({
              'value': 3,
            }),
          }),
        }),
      }),
      'op': Token('STAR', '*'),
      'right': dict({
        <class 'compiler.ast.UnaryOp'>: dict({
          'op': Token('MINUS', '-'),
          'operand': dict({
            <class 'compiler.ast.IntLiteral'>: dict({
              'value': 2,
            }),
          }),
        }),
      }),
    }),
  })
# ---
# name: test_multiplication_with_negative_int_both.1
  dict({
    'left': dict({
      'operand': dict({
        <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
      }),
      <class 'compiler.ast.UnaryOp'>: <class 'compiler.langtypes.Int'>,
    }),
    'right': dict({
      'operand': dict({
        <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
      }),
      <class 'compiler.ast.UnaryOp'>: <class 'compiler.langtypes.Int'>,
    }),
    <class 'compiler.ast.Factor'>: <class 'compiler.langtypes.Int'>,
  })
# ---
# name: test_multiplication_with_negative_int_left
  dict({
    <class 'compiler.ast.Factor'>: dict({
      'left': dict({
        <class 'compiler.ast.UnaryOp'>: dict({
          'op': Token('MINUS', '-'),
          'operand': dict({
            <class 'compiler.ast.IntLiteral'>: dict({
              'value': 3,
            }),
          }),
        }),
      }),
      'op': Token('STAR', '*'),
      'right': dict({
        <class 'compiler.ast.IntLiteral'>: dict({
          'value': 2,
        }),
      }),
    }),
  })
# ---
# name: test_multiplication_with_negative_int_left.1
  dict({
    'left': dict({
      'operand': dict({
        <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
      }),
      <class 'compiler.ast.UnaryOp'>: <class 'compiler.langtypes.Int'>,
    }),
    'right': dict({
      <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
    }),
    <class 'compiler.ast.Factor'>: <class 'compiler.langtypes.Int'>,
  })
# ---
# name: test_multiplication_with_negative_int_right
  dict({
    <class 'compiler.ast.Factor'>: dict({
      'left': dict({
        <class 'compiler.ast.IntLiteral'>: dict({
          'value': 3,
        }),
      }),
      'op': Token('STAR', '*'),
      'right': dict({
        <class 'compiler.ast.UnaryOp'>: dict({
          'op': Token('MINUS', '-'),
          'operand': dict({
            <class 'compiler.ast.IntLiteral'>: dict({
              'value': 2,
            }),
          }),
        }),
      }),
    }),
  })
# ---
# name: test_multiplication_with_negative_int_right.1
  dict({
    'left': dict({
      <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
    }),
    'right': dict({
      'operand': dict({
        <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
      }),
      <class 'compiler.ast.UnaryOp'>: <class 'compiler.langtypes.Int'>,
    }),
    <class 'compiler.ast.Factor'>: <class 'compiler.langtypes.Int'>,
  })
# ---
# name: test_multiplication_with_positive_int
  dict({
    <class 'compiler.ast.Factor'>: dict({
      'left': dict({
        <class 'compiler.ast.IntLiteral'>: dict({
          'value': 3,
        }),
      }),
      'op': Token('STAR', '*'),
      'right': dict({
        <class 'compiler.ast.IntLiteral'>: dict({
          'value': 2,
        }),
      }),
    }),
  })
# ---
# name: test_multiplication_with_positive_int.1
  dict({
    'left': dict({
      <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
    }),
    'right': dict({
      <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
    }),
    <class 'compiler.ast.Factor'>: <class 'compiler.langtypes.Int'>,
  })
# ---
# name: test_not_false
  dict({
    <class 'compiler.ast.UnaryOp'>: dict({
      'op': Token('BANG', '!'),
      'operand': dict({
        <class 'compiler.ast.BoolLiteral'>: dict({
          'value': False,
        }),
      }),
    }),
  })
# ---
# name: test_not_false.1
  dict({
    'operand': dict({
      <class 'compiler.ast.BoolLiteral'>: <class 'compiler.langtypes.Bool'>,
    }),
    <class 'compiler.ast.UnaryOp'>: <class 'compiler.langtypes.Bool'>,
  })
# ---
# name: test_not_true
  dict({
    <class 'compiler.ast.UnaryOp'>: dict({
      'op': Token('BANG', '!'),
      'operand': dict({
        <class 'compiler.ast.BoolLiteral'>: dict({
          'value': True,
        }),
      }),
    }),
  })
# ---
# name: test_not_true.1
  dict({
    'operand': dict({
      <class 'compiler.ast.BoolLiteral'>: <class 'compiler.langtypes.Bool'>,
    }),
    <class 'compiler.ast.UnaryOp'>: <class 'compiler.langtypes.Bool'>,
  })
# ---
# name: test_noteq_diffnum
  dict({
    <class 'compiler.ast.Equality'>: dict({
      'left': dict({
        <class 'compiler.ast.IntLiteral'>: dict({
          'value': 3,
        }),
      }),
      'op': Token('__ANON_4', '!='),
      'right': dict({
        <class 'compiler.ast.IntLiteral'>: dict({
          'value': 4,
        }),
      }),
    }),
  })
# ---
# name: test_noteq_diffnum.1
  dict({
    'left': dict({
      <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
    }),
    'right': dict({
      <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
    }),
    <class 'compiler.ast.Equality'>: <class 'compiler.langtypes.Bool'>,
  })
# ---
# name: test_noteq_samenum
  dict({
    <class 'compiler.ast.Equality'>: dict({
      'left': dict({
        <class 'compiler.ast.IntLiteral'>: dict({
          'value': 3,
        }),
      }),
      'op': Token('__ANON_4', '!='),
      'right': dict({
        <class 'compiler.ast.IntLiteral'>: dict({
          'value': 3,
        }),
      }),
    }),
  })
# ---
# name: test_noteq_samenum.1
  dict({
    'left': dict({
      <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
    }),
    'right': dict({
      <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
    }),
    <class 'compiler.ast.Equality'>: <class 'compiler.langtypes.Bool'>,
  })
# ---
# name: test_subtraction_with_negative_int_both
  dict({
    <class 'compiler.ast.Term'>: dict({
      'left': dict({
        <class 'compiler.ast.UnaryOp'>: dict({
          'op': Token('MINUS', '-'),
          'operand': dict({
            <class 'compiler.ast.IntLiteral'>: dict({
              'value': 1,
            }),
          }),
        }),
      }),
      'op': Token('MINUS', '-'),
      'right': dict({
        <class 'compiler.ast.UnaryOp'>: dict({
          'op': Token('MINUS', '-'),
          'operand': dict({
            <class 'compiler.ast.IntLiteral'>: dict({
              'value': 2,
            }),
          }),
        }),
      }),
    }),
  })
# ---
# name: test_subtraction_with_negative_int_both.1
  dict({
    'left': dict({
      'operand': dict({
        <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
      }),
      <class 'compiler.ast.UnaryOp'>: <class 'compiler.langtypes.Int'>,
    }),
    'right': dict({
      'operand': dict({
        <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
      }),
      <class 'compiler.ast.UnaryOp'>: <class 'compiler.langtypes.Int'>,
    }),
    <class 'compiler.ast.Term'>: <class 'compiler.langtypes.Int'>,
  })
# ---
# name: test_subtraction_with_negative_int_left
  dict({
    <class 'compiler.ast.Term'>: dict({
      'left': dict({
        <class 'compiler.ast.UnaryOp'>: dict({
          'op': Token('MINUS', '-'),
          'operand': dict({
            <class 'compiler.ast.IntLiteral'>: dict({
              'value': 1,
            }),
          }),
        }),
      }),
      'op': Token('MINUS', '-'),
      'right': dict({
        <class 'compiler.ast.IntLiteral'>: dict({
          'value': 2,
        }),
      }),
    }),
  })
# ---
# name: test_subtraction_with_negative_int_left.1
  dict({
    'left': dict({
      'operand': dict({
        <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
      }),
      <class 'compiler.ast.UnaryOp'>: <class 'compiler.langtypes.Int'>,
    }),
    'right': dict({
      <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
    }),
    <class 'compiler.ast.Term'>: <class 'compiler.langtypes.Int'>,
  })
# ---
# name: test_subtraction_with_negative_int_right
  dict({
    <class 'compiler.ast.Term'>: dict({
      'left': dict({
        <class 'compiler.ast.IntLiteral'>: dict({
          'value': 1,
        }),
      }),
      'op': Token('MINUS', '-'),
      'right': dict({
        <class 'compiler.ast.UnaryOp'>: dict({
          'op': Token('MINUS', '-'),
          'operand': dict({
            <class 'compiler.ast.IntLiteral'>: dict({
              'value': 2,
            }),
          }),
        }),
      }),
    }),
  })
# ---
# name: test_subtraction_with_negative_int_right.1
  dict({
    'left': dict({
      <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
    }),
    'right': dict({
      'operand': dict({
        <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
      }),
      <class 'compiler.ast.UnaryOp'>: <class 'compiler.langtypes.Int'>,
    }),
    <class 'compiler.ast.Term'>: <class 'compiler.langtypes.Int'>,
  })
# ---
# name: test_subtraction_with_positive_int
  dict({
    <class 'compiler.ast.Term'>: dict({
      'left': dict({
        <class 'compiler.ast.IntLiteral'>: dict({
          'value': 1,
        }),
      }),
      'op': Token('MINUS', '-'),
      'right': dict({
        <class 'compiler.ast.IntLiteral'>: dict({
          'value': 2,
        }),
      }),
    }),
  })
# ---
# name: test_subtraction_with_positive_int.1
  dict({
    'left': dict({
      <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
    }),
    'right': dict({
      <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
    }),
    <class 'compiler.ast.Term'>: <class 'compiler.langtypes.Int'>,
  })
# ---
