# serializer version: 1
# name: test_if_stmt_false_literal
  dict({
    <class 'compiler.ast.StatementList'>: dict({
      'stmts': list([
        dict({
          <class 'compiler.ast.VariableDeclaration'>: dict({
            'ident': Token('IDENTIFIER', 'x'),
            'rvalue': dict({
              <class 'compiler.ast.IntLiteral'>: dict({
                'value': 1,
              }),
            }),
          }),
        }),
        dict({
          <class 'compiler.ast.IfChain'>: dict({
            'if_stmt': dict({
              <class 'compiler.ast.IfStmt'>: dict({
                'cond': dict({
                  <class 'compiler.ast.BoolLiteral'>: dict({
                    'value': False,
                  }),
                }),
                'true_block': dict({
                  <class 'compiler.ast.StatementBlock'>: dict({
                    'stmts': list([
                      dict({
                        <class 'compiler.ast.Assignment'>: dict({
                          'lvalue': Token('IDENTIFIER', 'x'),
                          'rvalue': dict({
                            <class 'compiler.ast.IntLiteral'>: dict({
                              'value': 3,
                            }),
                          }),
                        }),
                      }),
                    ]),
                  }),
                }),
              }),
            }),
          }),
        }),
      ]),
    }),
  })
# ---
# name: test_if_stmt_false_literal.1
  dict({
    'stmts': list([
      dict({
        'rvalue': dict({
          <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
        }),
        <class 'compiler.ast.VariableDeclaration'>: <class 'compiler.langtypes.Int'>,
      }),
      dict({
        'if_stmt': dict({
          'cond': dict({
            <class 'compiler.ast.BoolLiteral'>: <class 'compiler.langtypes.Bool'>,
          }),
          'true_block': dict({
            'stmts': list([
              dict({
                'rvalue': dict({
                  <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
                }),
                <class 'compiler.ast.Assignment'>: <class 'compiler.langtypes.Int'>,
              }),
            ]),
            <class 'compiler.ast.StatementBlock'>: <class 'compiler.langtypes.Block'>,
          }),
          <class 'compiler.ast.IfStmt'>: <class 'compiler.langtypes.Block'>,
        }),
        <class 'compiler.ast.IfChain'>: <class 'compiler.langtypes.Block'>,
      }),
    ]),
    <class 'compiler.ast.StatementList'>: <class 'compiler.langtypes.Block'>,
  })
# ---
# name: test_if_stmt_true_literal
  dict({
    <class 'compiler.ast.StatementList'>: dict({
      'stmts': list([
        dict({
          <class 'compiler.ast.VariableDeclaration'>: dict({
            'ident': Token('IDENTIFIER', 'x'),
            'rvalue': dict({
              <class 'compiler.ast.IntLiteral'>: dict({
                'value': 1,
              }),
            }),
          }),
        }),
        dict({
          <class 'compiler.ast.IfChain'>: dict({
            'if_stmt': dict({
              <class 'compiler.ast.IfStmt'>: dict({
                'cond': dict({
                  <class 'compiler.ast.BoolLiteral'>: dict({
                    'value': True,
                  }),
                }),
                'true_block': dict({
                  <class 'compiler.ast.StatementBlock'>: dict({
                    'stmts': list([
                      dict({
                        <class 'compiler.ast.Assignment'>: dict({
                          'lvalue': Token('IDENTIFIER', 'x'),
                          'rvalue': dict({
                            <class 'compiler.ast.IntLiteral'>: dict({
                              'value': 3,
                            }),
                          }),
                        }),
                      }),
                    ]),
                  }),
                }),
              }),
            }),
          }),
        }),
      ]),
    }),
  })
# ---
# name: test_if_stmt_true_literal.1
  dict({
    'stmts': list([
      dict({
        'rvalue': dict({
          <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
        }),
        <class 'compiler.ast.VariableDeclaration'>: <class 'compiler.langtypes.Int'>,
      }),
      dict({
        'if_stmt': dict({
          'cond': dict({
            <class 'compiler.ast.BoolLiteral'>: <class 'compiler.langtypes.Bool'>,
          }),
          'true_block': dict({
            'stmts': list([
              dict({
                'rvalue': dict({
                  <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
                }),
                <class 'compiler.ast.Assignment'>: <class 'compiler.langtypes.Int'>,
              }),
            ]),
            <class 'compiler.ast.StatementBlock'>: <class 'compiler.langtypes.Block'>,
          }),
          <class 'compiler.ast.IfStmt'>: <class 'compiler.langtypes.Block'>,
        }),
        <class 'compiler.ast.IfChain'>: <class 'compiler.langtypes.Block'>,
      }),
    ]),
    <class 'compiler.ast.StatementList'>: <class 'compiler.langtypes.Block'>,
  })
# ---
