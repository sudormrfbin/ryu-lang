# serializer version: 1
# name: test_match_array_empty_case[ast]
  dict({
    <class 'compiler.ast.VariableDeclaration'>: dict({
      'ident': Token('IDENTIFIER', 'i'),
      'rvalue': dict({
        <class 'compiler.ast.FunctionCall'>: dict({
          'args': dict({
            <class 'compiler.ast.FunctionArgs'>: dict({
              'args': list([
                dict({
                  <class 'compiler.ast.IntLiteral'>: dict({
                    'value': 2,
                  }),
                }),
                dict({
                  <class 'compiler.ast.IntLiteral'>: dict({
                    'value': 3,
                  }),
                }),
              ]),
            }),
          }),
          'callee': dict({
            <class 'compiler.ast.Variable'>: dict({
              'value': Token('IDENTIFIER', 'sum'),
            }),
          }),
        }),
      }),
    }),
  })
# ---
# name: test_match_array_empty_case[typed-ast]
  dict({
    'rvalue': dict({
      'args': dict({
        'args': list([
          dict({
            <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
          }),
          dict({
            <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
          }),
        ]),
        <class 'compiler.ast.FunctionArgs'>: <class 'compiler.langtypes.Params'>,
      }),
      'callee': dict({
        <class 'compiler.ast.Variable'>: <class 'compiler.langtypes.Function'>,
      }),
      <class 'compiler.ast.FunctionCall'>: <class 'compiler.langtypes.Int'>,
    }),
    <class 'compiler.ast.VariableDeclaration'>: <class 'compiler.langtypes.Int'>,
  })
# ---
