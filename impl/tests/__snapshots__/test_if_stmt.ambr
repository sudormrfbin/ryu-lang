# serializer version: 1
# name: test_if_else
  dict({
    <class 'compiler.ast.StatementList'>: dict({
      'stmts': list([
        dict({
          <class 'compiler.ast.VariableDeclaration'>: dict({
            'ident': Token('IDENTIFIER', 'x'),
            'rvalue': dict({
              <class 'compiler.ast.StringLiteral'>: dict({
                'value': '',
              }),
            }),
          }),
        }),
        dict({
          <class 'compiler.ast.IfChain'>: dict({
            'else_block': dict({
              <class 'compiler.ast.StatementBlock'>: dict({
                'stmts': list([
                  dict({
                    <class 'compiler.ast.Assignment'>: dict({
                      'lvalue': Token('IDENTIFIER', 'x'),
                      'rvalue': dict({
                        <class 'compiler.ast.StringLiteral'>: dict({
                          'value': 'false block',
                        }),
                      }),
                    }),
                  }),
                ]),
              }),
            }),
            'if_stmt': dict({
              <class 'compiler.ast.IfStmt'>: dict({
                'cond': dict({
                  <class 'compiler.ast.BoolLiteral'>: dict({
                    'value': False,
                  }),
                }),
                'true_block': dict({
                  <class 'compiler.ast.StatementBlock'>: dict({
                    'stmts': list([
                      dict({
                        <class 'compiler.ast.Assignment'>: dict({
                          'lvalue': Token('IDENTIFIER', 'x'),
                          'rvalue': dict({
                            <class 'compiler.ast.StringLiteral'>: dict({
                              'value': 'true block',
                            }),
                          }),
                        }),
                      }),
                    ]),
                  }),
                }),
              }),
            }),
          }),
        }),
      ]),
    }),
  })
# ---
# name: test_if_else.1
  dict({
    <class 'compiler.ast.StatementList'>: dict({
      'fields': dict({
        'stmts': list([
          dict({
            <class 'compiler.ast.VariableDeclaration'>: dict({
              'fields': dict({
                'rvalue': dict({
                  <class 'compiler.ast.StringLiteral'>: dict({
                    'fields': dict({
                    }),
                    'type': <class 'compiler.langtypes.String'>,
                  }),
                }),
              }),
              'type': <class 'compiler.langtypes.String'>,
            }),
          }),
          dict({
            <class 'compiler.ast.IfChain'>: dict({
              'fields': dict({
                'else_block': dict({
                  <class 'compiler.ast.StatementBlock'>: dict({
                    'fields': dict({
                      'stmts': list([
                        dict({
                          <class 'compiler.ast.Assignment'>: dict({
                            'fields': dict({
                              'rvalue': dict({
                                <class 'compiler.ast.StringLiteral'>: dict({
                                  'fields': dict({
                                  }),
                                  'type': <class 'compiler.langtypes.String'>,
                                }),
                              }),
                            }),
                            'type': <class 'compiler.langtypes.String'>,
                          }),
                        }),
                      ]),
                    }),
                    'type': <class 'compiler.langtypes.Block'>,
                  }),
                }),
                'if_stmt': dict({
                  <class 'compiler.ast.IfStmt'>: dict({
                    'fields': dict({
                      'cond': dict({
                        <class 'compiler.ast.BoolLiteral'>: dict({
                          'fields': dict({
                          }),
                          'type': <class 'compiler.langtypes.Bool'>,
                        }),
                      }),
                      'true_block': dict({
                        <class 'compiler.ast.StatementBlock'>: dict({
                          'fields': dict({
                            'stmts': list([
                              dict({
                                <class 'compiler.ast.Assignment'>: dict({
                                  'fields': dict({
                                    'rvalue': dict({
                                      <class 'compiler.ast.StringLiteral'>: dict({
                                        'fields': dict({
                                        }),
                                        'type': <class 'compiler.langtypes.String'>,
                                      }),
                                    }),
                                  }),
                                  'type': <class 'compiler.langtypes.String'>,
                                }),
                              }),
                            ]),
                          }),
                          'type': <class 'compiler.langtypes.Block'>,
                        }),
                      }),
                    }),
                    'type': <class 'compiler.langtypes.Block'>,
                  }),
                }),
              }),
              'type': <class 'compiler.langtypes.Block'>,
            }),
          }),
        ]),
      }),
      'type': <class 'compiler.langtypes.Block'>,
    }),
  })
# ---
# name: test_if_else_if
  dict({
    <class 'compiler.ast.StatementList'>: dict({
      'stmts': list([
        dict({
          <class 'compiler.ast.VariableDeclaration'>: dict({
            'ident': Token('IDENTIFIER', 'x'),
            'rvalue': dict({
              <class 'compiler.ast.StringLiteral'>: dict({
                'value': '',
              }),
            }),
          }),
        }),
        dict({
          <class 'compiler.ast.IfChain'>: dict({
            'else_if_ladder': dict({
              <class 'compiler.ast.ElseIfLadder'>: dict({
                'blocks': list([
                  dict({
                    <class 'compiler.ast.ElseIfStmt'>: dict({
                      'cond': dict({
                        <class 'compiler.ast.BoolLiteral'>: dict({
                          'value': True,
                        }),
                      }),
                      'true_block': dict({
                        <class 'compiler.ast.StatementBlock'>: dict({
                          'stmts': list([
                            dict({
                              <class 'compiler.ast.Assignment'>: dict({
                                'lvalue': Token('IDENTIFIER', 'x'),
                                'rvalue': dict({
                                  <class 'compiler.ast.StringLiteral'>: dict({
                                    'value': 'elif block 1',
                                  }),
                                }),
                              }),
                            }),
                          ]),
                        }),
                      }),
                    }),
                  }),
                ]),
              }),
            }),
            'if_stmt': dict({
              <class 'compiler.ast.IfStmt'>: dict({
                'cond': dict({
                  <class 'compiler.ast.BoolLiteral'>: dict({
                    'value': False,
                  }),
                }),
                'true_block': dict({
                  <class 'compiler.ast.StatementBlock'>: dict({
                    'stmts': list([
                      dict({
                        <class 'compiler.ast.Assignment'>: dict({
                          'lvalue': Token('IDENTIFIER', 'x'),
                          'rvalue': dict({
                            <class 'compiler.ast.StringLiteral'>: dict({
                              'value': 'true block',
                            }),
                          }),
                        }),
                      }),
                    ]),
                  }),
                }),
              }),
            }),
          }),
        }),
      ]),
    }),
  })
# ---
# name: test_if_else_if.1
  dict({
    <class 'compiler.ast.StatementList'>: dict({
      'fields': dict({
        'stmts': list([
          dict({
            <class 'compiler.ast.VariableDeclaration'>: dict({
              'fields': dict({
                'rvalue': dict({
                  <class 'compiler.ast.StringLiteral'>: dict({
                    'fields': dict({
                    }),
                    'type': <class 'compiler.langtypes.String'>,
                  }),
                }),
              }),
              'type': <class 'compiler.langtypes.String'>,
            }),
          }),
          dict({
            <class 'compiler.ast.IfChain'>: dict({
              'fields': dict({
                'else_if_ladder': dict({
                  <class 'compiler.ast.ElseIfLadder'>: dict({
                    'fields': dict({
                      'blocks': list([
                        dict({
                          <class 'compiler.ast.ElseIfStmt'>: dict({
                            'fields': dict({
                              'cond': dict({
                                <class 'compiler.ast.BoolLiteral'>: dict({
                                  'fields': dict({
                                  }),
                                  'type': <class 'compiler.langtypes.Bool'>,
                                }),
                              }),
                              'true_block': dict({
                                <class 'compiler.ast.StatementBlock'>: dict({
                                  'fields': dict({
                                    'stmts': list([
                                      dict({
                                        <class 'compiler.ast.Assignment'>: dict({
                                          'fields': dict({
                                            'rvalue': dict({
                                              <class 'compiler.ast.StringLiteral'>: dict({
                                                'fields': dict({
                                                }),
                                                'type': <class 'compiler.langtypes.String'>,
                                              }),
                                            }),
                                          }),
                                          'type': <class 'compiler.langtypes.String'>,
                                        }),
                                      }),
                                    ]),
                                  }),
                                  'type': <class 'compiler.langtypes.Block'>,
                                }),
                              }),
                            }),
                            'type': <class 'compiler.langtypes.Block'>,
                          }),
                        }),
                      ]),
                    }),
                    'type': <class 'compiler.langtypes.Block'>,
                  }),
                }),
                'if_stmt': dict({
                  <class 'compiler.ast.IfStmt'>: dict({
                    'fields': dict({
                      'cond': dict({
                        <class 'compiler.ast.BoolLiteral'>: dict({
                          'fields': dict({
                          }),
                          'type': <class 'compiler.langtypes.Bool'>,
                        }),
                      }),
                      'true_block': dict({
                        <class 'compiler.ast.StatementBlock'>: dict({
                          'fields': dict({
                            'stmts': list([
                              dict({
                                <class 'compiler.ast.Assignment'>: dict({
                                  'fields': dict({
                                    'rvalue': dict({
                                      <class 'compiler.ast.StringLiteral'>: dict({
                                        'fields': dict({
                                        }),
                                        'type': <class 'compiler.langtypes.String'>,
                                      }),
                                    }),
                                  }),
                                  'type': <class 'compiler.langtypes.String'>,
                                }),
                              }),
                            ]),
                          }),
                          'type': <class 'compiler.langtypes.Block'>,
                        }),
                      }),
                    }),
                    'type': <class 'compiler.langtypes.Block'>,
                  }),
                }),
              }),
              'type': <class 'compiler.langtypes.Block'>,
            }),
          }),
        ]),
      }),
      'type': <class 'compiler.langtypes.Block'>,
    }),
  })
# ---
# name: test_if_else_if_2
  dict({
    <class 'compiler.ast.StatementList'>: dict({
      'stmts': list([
        dict({
          <class 'compiler.ast.VariableDeclaration'>: dict({
            'ident': Token('IDENTIFIER', 'x'),
            'rvalue': dict({
              <class 'compiler.ast.StringLiteral'>: dict({
                'value': '',
              }),
            }),
          }),
        }),
        dict({
          <class 'compiler.ast.IfChain'>: dict({
            'else_if_ladder': dict({
              <class 'compiler.ast.ElseIfLadder'>: dict({
                'blocks': list([
                  dict({
                    <class 'compiler.ast.ElseIfStmt'>: dict({
                      'cond': dict({
                        <class 'compiler.ast.BoolLiteral'>: dict({
                          'value': False,
                        }),
                      }),
                      'true_block': dict({
                        <class 'compiler.ast.StatementBlock'>: dict({
                          'stmts': list([
                            dict({
                              <class 'compiler.ast.Assignment'>: dict({
                                'lvalue': Token('IDENTIFIER', 'x'),
                                'rvalue': dict({
                                  <class 'compiler.ast.StringLiteral'>: dict({
                                    'value': 'elif block 1',
                                  }),
                                }),
                              }),
                            }),
                          ]),
                        }),
                      }),
                    }),
                  }),
                  dict({
                    <class 'compiler.ast.ElseIfStmt'>: dict({
                      'cond': dict({
                        <class 'compiler.ast.BoolLiteral'>: dict({
                          'value': True,
                        }),
                      }),
                      'true_block': dict({
                        <class 'compiler.ast.StatementBlock'>: dict({
                          'stmts': list([
                            dict({
                              <class 'compiler.ast.Assignment'>: dict({
                                'lvalue': Token('IDENTIFIER', 'x'),
                                'rvalue': dict({
                                  <class 'compiler.ast.StringLiteral'>: dict({
                                    'value': 'elif block 2',
                                  }),
                                }),
                              }),
                            }),
                          ]),
                        }),
                      }),
                    }),
                  }),
                ]),
              }),
            }),
            'if_stmt': dict({
              <class 'compiler.ast.IfStmt'>: dict({
                'cond': dict({
                  <class 'compiler.ast.BoolLiteral'>: dict({
                    'value': False,
                  }),
                }),
                'true_block': dict({
                  <class 'compiler.ast.StatementBlock'>: dict({
                    'stmts': list([
                      dict({
                        <class 'compiler.ast.Assignment'>: dict({
                          'lvalue': Token('IDENTIFIER', 'x'),
                          'rvalue': dict({
                            <class 'compiler.ast.StringLiteral'>: dict({
                              'value': 'true block',
                            }),
                          }),
                        }),
                      }),
                    ]),
                  }),
                }),
              }),
            }),
          }),
        }),
      ]),
    }),
  })
# ---
# name: test_if_else_if_2.1
  dict({
    <class 'compiler.ast.StatementList'>: dict({
      'fields': dict({
        'stmts': list([
          dict({
            <class 'compiler.ast.VariableDeclaration'>: dict({
              'fields': dict({
                'rvalue': dict({
                  <class 'compiler.ast.StringLiteral'>: dict({
                    'fields': dict({
                    }),
                    'type': <class 'compiler.langtypes.String'>,
                  }),
                }),
              }),
              'type': <class 'compiler.langtypes.String'>,
            }),
          }),
          dict({
            <class 'compiler.ast.IfChain'>: dict({
              'fields': dict({
                'else_if_ladder': dict({
                  <class 'compiler.ast.ElseIfLadder'>: dict({
                    'fields': dict({
                      'blocks': list([
                        dict({
                          <class 'compiler.ast.ElseIfStmt'>: dict({
                            'fields': dict({
                              'cond': dict({
                                <class 'compiler.ast.BoolLiteral'>: dict({
                                  'fields': dict({
                                  }),
                                  'type': <class 'compiler.langtypes.Bool'>,
                                }),
                              }),
                              'true_block': dict({
                                <class 'compiler.ast.StatementBlock'>: dict({
                                  'fields': dict({
                                    'stmts': list([
                                      dict({
                                        <class 'compiler.ast.Assignment'>: dict({
                                          'fields': dict({
                                            'rvalue': dict({
                                              <class 'compiler.ast.StringLiteral'>: dict({
                                                'fields': dict({
                                                }),
                                                'type': <class 'compiler.langtypes.String'>,
                                              }),
                                            }),
                                          }),
                                          'type': <class 'compiler.langtypes.String'>,
                                        }),
                                      }),
                                    ]),
                                  }),
                                  'type': <class 'compiler.langtypes.Block'>,
                                }),
                              }),
                            }),
                            'type': <class 'compiler.langtypes.Block'>,
                          }),
                        }),
                        dict({
                          <class 'compiler.ast.ElseIfStmt'>: dict({
                            'fields': dict({
                              'cond': dict({
                                <class 'compiler.ast.BoolLiteral'>: dict({
                                  'fields': dict({
                                  }),
                                  'type': <class 'compiler.langtypes.Bool'>,
                                }),
                              }),
                              'true_block': dict({
                                <class 'compiler.ast.StatementBlock'>: dict({
                                  'fields': dict({
                                    'stmts': list([
                                      dict({
                                        <class 'compiler.ast.Assignment'>: dict({
                                          'fields': dict({
                                            'rvalue': dict({
                                              <class 'compiler.ast.StringLiteral'>: dict({
                                                'fields': dict({
                                                }),
                                                'type': <class 'compiler.langtypes.String'>,
                                              }),
                                            }),
                                          }),
                                          'type': <class 'compiler.langtypes.String'>,
                                        }),
                                      }),
                                    ]),
                                  }),
                                  'type': <class 'compiler.langtypes.Block'>,
                                }),
                              }),
                            }),
                            'type': <class 'compiler.langtypes.Block'>,
                          }),
                        }),
                      ]),
                    }),
                    'type': <class 'compiler.langtypes.Block'>,
                  }),
                }),
                'if_stmt': dict({
                  <class 'compiler.ast.IfStmt'>: dict({
                    'fields': dict({
                      'cond': dict({
                        <class 'compiler.ast.BoolLiteral'>: dict({
                          'fields': dict({
                          }),
                          'type': <class 'compiler.langtypes.Bool'>,
                        }),
                      }),
                      'true_block': dict({
                        <class 'compiler.ast.StatementBlock'>: dict({
                          'fields': dict({
                            'stmts': list([
                              dict({
                                <class 'compiler.ast.Assignment'>: dict({
                                  'fields': dict({
                                    'rvalue': dict({
                                      <class 'compiler.ast.StringLiteral'>: dict({
                                        'fields': dict({
                                        }),
                                        'type': <class 'compiler.langtypes.String'>,
                                      }),
                                    }),
                                  }),
                                  'type': <class 'compiler.langtypes.String'>,
                                }),
                              }),
                            ]),
                          }),
                          'type': <class 'compiler.langtypes.Block'>,
                        }),
                      }),
                    }),
                    'type': <class 'compiler.langtypes.Block'>,
                  }),
                }),
              }),
              'type': <class 'compiler.langtypes.Block'>,
            }),
          }),
        ]),
      }),
      'type': <class 'compiler.langtypes.Block'>,
    }),
  })
# ---
# name: test_if_else_if_else
  dict({
    <class 'compiler.ast.StatementList'>: dict({
      'stmts': list([
        dict({
          <class 'compiler.ast.VariableDeclaration'>: dict({
            'ident': Token('IDENTIFIER', 'x'),
            'rvalue': dict({
              <class 'compiler.ast.StringLiteral'>: dict({
                'value': '',
              }),
            }),
          }),
        }),
        dict({
          <class 'compiler.ast.IfChain'>: dict({
            'else_block': dict({
              <class 'compiler.ast.StatementBlock'>: dict({
                'stmts': list([
                  dict({
                    <class 'compiler.ast.Assignment'>: dict({
                      'lvalue': Token('IDENTIFIER', 'x'),
                      'rvalue': dict({
                        <class 'compiler.ast.StringLiteral'>: dict({
                          'value': 'else block',
                        }),
                      }),
                    }),
                  }),
                ]),
              }),
            }),
            'else_if_ladder': dict({
              <class 'compiler.ast.ElseIfLadder'>: dict({
                'blocks': list([
                  dict({
                    <class 'compiler.ast.ElseIfStmt'>: dict({
                      'cond': dict({
                        <class 'compiler.ast.BoolLiteral'>: dict({
                          'value': False,
                        }),
                      }),
                      'true_block': dict({
                        <class 'compiler.ast.StatementBlock'>: dict({
                          'stmts': list([
                            dict({
                              <class 'compiler.ast.Assignment'>: dict({
                                'lvalue': Token('IDENTIFIER', 'x'),
                                'rvalue': dict({
                                  <class 'compiler.ast.StringLiteral'>: dict({
                                    'value': 'elif block 1',
                                  }),
                                }),
                              }),
                            }),
                          ]),
                        }),
                      }),
                    }),
                  }),
                  dict({
                    <class 'compiler.ast.ElseIfStmt'>: dict({
                      'cond': dict({
                        <class 'compiler.ast.BoolLiteral'>: dict({
                          'value': False,
                        }),
                      }),
                      'true_block': dict({
                        <class 'compiler.ast.StatementBlock'>: dict({
                          'stmts': list([
                            dict({
                              <class 'compiler.ast.Assignment'>: dict({
                                'lvalue': Token('IDENTIFIER', 'x'),
                                'rvalue': dict({
                                  <class 'compiler.ast.StringLiteral'>: dict({
                                    'value': 'elif block 2',
                                  }),
                                }),
                              }),
                            }),
                          ]),
                        }),
                      }),
                    }),
                  }),
                ]),
              }),
            }),
            'if_stmt': dict({
              <class 'compiler.ast.IfStmt'>: dict({
                'cond': dict({
                  <class 'compiler.ast.BoolLiteral'>: dict({
                    'value': False,
                  }),
                }),
                'true_block': dict({
                  <class 'compiler.ast.StatementBlock'>: dict({
                    'stmts': list([
                      dict({
                        <class 'compiler.ast.Assignment'>: dict({
                          'lvalue': Token('IDENTIFIER', 'x'),
                          'rvalue': dict({
                            <class 'compiler.ast.StringLiteral'>: dict({
                              'value': 'true block',
                            }),
                          }),
                        }),
                      }),
                    ]),
                  }),
                }),
              }),
            }),
          }),
        }),
      ]),
    }),
  })
# ---
# name: test_if_else_if_else.1
  dict({
    <class 'compiler.ast.StatementList'>: dict({
      'fields': dict({
        'stmts': list([
          dict({
            <class 'compiler.ast.VariableDeclaration'>: dict({
              'fields': dict({
                'rvalue': dict({
                  <class 'compiler.ast.StringLiteral'>: dict({
                    'fields': dict({
                    }),
                    'type': <class 'compiler.langtypes.String'>,
                  }),
                }),
              }),
              'type': <class 'compiler.langtypes.String'>,
            }),
          }),
          dict({
            <class 'compiler.ast.IfChain'>: dict({
              'fields': dict({
                'else_block': dict({
                  <class 'compiler.ast.StatementBlock'>: dict({
                    'fields': dict({
                      'stmts': list([
                        dict({
                          <class 'compiler.ast.Assignment'>: dict({
                            'fields': dict({
                              'rvalue': dict({
                                <class 'compiler.ast.StringLiteral'>: dict({
                                  'fields': dict({
                                  }),
                                  'type': <class 'compiler.langtypes.String'>,
                                }),
                              }),
                            }),
                            'type': <class 'compiler.langtypes.String'>,
                          }),
                        }),
                      ]),
                    }),
                    'type': <class 'compiler.langtypes.Block'>,
                  }),
                }),
                'else_if_ladder': dict({
                  <class 'compiler.ast.ElseIfLadder'>: dict({
                    'fields': dict({
                      'blocks': list([
                        dict({
                          <class 'compiler.ast.ElseIfStmt'>: dict({
                            'fields': dict({
                              'cond': dict({
                                <class 'compiler.ast.BoolLiteral'>: dict({
                                  'fields': dict({
                                  }),
                                  'type': <class 'compiler.langtypes.Bool'>,
                                }),
                              }),
                              'true_block': dict({
                                <class 'compiler.ast.StatementBlock'>: dict({
                                  'fields': dict({
                                    'stmts': list([
                                      dict({
                                        <class 'compiler.ast.Assignment'>: dict({
                                          'fields': dict({
                                            'rvalue': dict({
                                              <class 'compiler.ast.StringLiteral'>: dict({
                                                'fields': dict({
                                                }),
                                                'type': <class 'compiler.langtypes.String'>,
                                              }),
                                            }),
                                          }),
                                          'type': <class 'compiler.langtypes.String'>,
                                        }),
                                      }),
                                    ]),
                                  }),
                                  'type': <class 'compiler.langtypes.Block'>,
                                }),
                              }),
                            }),
                            'type': <class 'compiler.langtypes.Block'>,
                          }),
                        }),
                        dict({
                          <class 'compiler.ast.ElseIfStmt'>: dict({
                            'fields': dict({
                              'cond': dict({
                                <class 'compiler.ast.BoolLiteral'>: dict({
                                  'fields': dict({
                                  }),
                                  'type': <class 'compiler.langtypes.Bool'>,
                                }),
                              }),
                              'true_block': dict({
                                <class 'compiler.ast.StatementBlock'>: dict({
                                  'fields': dict({
                                    'stmts': list([
                                      dict({
                                        <class 'compiler.ast.Assignment'>: dict({
                                          'fields': dict({
                                            'rvalue': dict({
                                              <class 'compiler.ast.StringLiteral'>: dict({
                                                'fields': dict({
                                                }),
                                                'type': <class 'compiler.langtypes.String'>,
                                              }),
                                            }),
                                          }),
                                          'type': <class 'compiler.langtypes.String'>,
                                        }),
                                      }),
                                    ]),
                                  }),
                                  'type': <class 'compiler.langtypes.Block'>,
                                }),
                              }),
                            }),
                            'type': <class 'compiler.langtypes.Block'>,
                          }),
                        }),
                      ]),
                    }),
                    'type': <class 'compiler.langtypes.Block'>,
                  }),
                }),
                'if_stmt': dict({
                  <class 'compiler.ast.IfStmt'>: dict({
                    'fields': dict({
                      'cond': dict({
                        <class 'compiler.ast.BoolLiteral'>: dict({
                          'fields': dict({
                          }),
                          'type': <class 'compiler.langtypes.Bool'>,
                        }),
                      }),
                      'true_block': dict({
                        <class 'compiler.ast.StatementBlock'>: dict({
                          'fields': dict({
                            'stmts': list([
                              dict({
                                <class 'compiler.ast.Assignment'>: dict({
                                  'fields': dict({
                                    'rvalue': dict({
                                      <class 'compiler.ast.StringLiteral'>: dict({
                                        'fields': dict({
                                        }),
                                        'type': <class 'compiler.langtypes.String'>,
                                      }),
                                    }),
                                  }),
                                  'type': <class 'compiler.langtypes.String'>,
                                }),
                              }),
                            ]),
                          }),
                          'type': <class 'compiler.langtypes.Block'>,
                        }),
                      }),
                    }),
                    'type': <class 'compiler.langtypes.Block'>,
                  }),
                }),
              }),
              'type': <class 'compiler.langtypes.Block'>,
            }),
          }),
        ]),
      }),
      'type': <class 'compiler.langtypes.Block'>,
    }),
  })
# ---
# name: test_if_else_if_none_executes
  dict({
    <class 'compiler.ast.StatementList'>: dict({
      'stmts': list([
        dict({
          <class 'compiler.ast.VariableDeclaration'>: dict({
            'ident': Token('IDENTIFIER', 'x'),
            'rvalue': dict({
              <class 'compiler.ast.StringLiteral'>: dict({
                'value': '',
              }),
            }),
          }),
        }),
        dict({
          <class 'compiler.ast.IfChain'>: dict({
            'else_if_ladder': dict({
              <class 'compiler.ast.ElseIfLadder'>: dict({
                'blocks': list([
                  dict({
                    <class 'compiler.ast.ElseIfStmt'>: dict({
                      'cond': dict({
                        <class 'compiler.ast.BoolLiteral'>: dict({
                          'value': False,
                        }),
                      }),
                      'true_block': dict({
                        <class 'compiler.ast.StatementBlock'>: dict({
                          'stmts': list([
                            dict({
                              <class 'compiler.ast.Assignment'>: dict({
                                'lvalue': Token('IDENTIFIER', 'x'),
                                'rvalue': dict({
                                  <class 'compiler.ast.StringLiteral'>: dict({
                                    'value': 'elif block 1',
                                  }),
                                }),
                              }),
                            }),
                          ]),
                        }),
                      }),
                    }),
                  }),
                  dict({
                    <class 'compiler.ast.ElseIfStmt'>: dict({
                      'cond': dict({
                        <class 'compiler.ast.BoolLiteral'>: dict({
                          'value': False,
                        }),
                      }),
                      'true_block': dict({
                        <class 'compiler.ast.StatementBlock'>: dict({
                          'stmts': list([
                            dict({
                              <class 'compiler.ast.Assignment'>: dict({
                                'lvalue': Token('IDENTIFIER', 'x'),
                                'rvalue': dict({
                                  <class 'compiler.ast.StringLiteral'>: dict({
                                    'value': 'elif block 2',
                                  }),
                                }),
                              }),
                            }),
                          ]),
                        }),
                      }),
                    }),
                  }),
                ]),
              }),
            }),
            'if_stmt': dict({
              <class 'compiler.ast.IfStmt'>: dict({
                'cond': dict({
                  <class 'compiler.ast.BoolLiteral'>: dict({
                    'value': False,
                  }),
                }),
                'true_block': dict({
                  <class 'compiler.ast.StatementBlock'>: dict({
                    'stmts': list([
                      dict({
                        <class 'compiler.ast.Assignment'>: dict({
                          'lvalue': Token('IDENTIFIER', 'x'),
                          'rvalue': dict({
                            <class 'compiler.ast.StringLiteral'>: dict({
                              'value': 'true block',
                            }),
                          }),
                        }),
                      }),
                    ]),
                  }),
                }),
              }),
            }),
          }),
        }),
      ]),
    }),
  })
# ---
# name: test_if_else_if_none_executes.1
  dict({
    <class 'compiler.ast.StatementList'>: dict({
      'fields': dict({
        'stmts': list([
          dict({
            <class 'compiler.ast.VariableDeclaration'>: dict({
              'fields': dict({
                'rvalue': dict({
                  <class 'compiler.ast.StringLiteral'>: dict({
                    'fields': dict({
                    }),
                    'type': <class 'compiler.langtypes.String'>,
                  }),
                }),
              }),
              'type': <class 'compiler.langtypes.String'>,
            }),
          }),
          dict({
            <class 'compiler.ast.IfChain'>: dict({
              'fields': dict({
                'else_if_ladder': dict({
                  <class 'compiler.ast.ElseIfLadder'>: dict({
                    'fields': dict({
                      'blocks': list([
                        dict({
                          <class 'compiler.ast.ElseIfStmt'>: dict({
                            'fields': dict({
                              'cond': dict({
                                <class 'compiler.ast.BoolLiteral'>: dict({
                                  'fields': dict({
                                  }),
                                  'type': <class 'compiler.langtypes.Bool'>,
                                }),
                              }),
                              'true_block': dict({
                                <class 'compiler.ast.StatementBlock'>: dict({
                                  'fields': dict({
                                    'stmts': list([
                                      dict({
                                        <class 'compiler.ast.Assignment'>: dict({
                                          'fields': dict({
                                            'rvalue': dict({
                                              <class 'compiler.ast.StringLiteral'>: dict({
                                                'fields': dict({
                                                }),
                                                'type': <class 'compiler.langtypes.String'>,
                                              }),
                                            }),
                                          }),
                                          'type': <class 'compiler.langtypes.String'>,
                                        }),
                                      }),
                                    ]),
                                  }),
                                  'type': <class 'compiler.langtypes.Block'>,
                                }),
                              }),
                            }),
                            'type': <class 'compiler.langtypes.Block'>,
                          }),
                        }),
                        dict({
                          <class 'compiler.ast.ElseIfStmt'>: dict({
                            'fields': dict({
                              'cond': dict({
                                <class 'compiler.ast.BoolLiteral'>: dict({
                                  'fields': dict({
                                  }),
                                  'type': <class 'compiler.langtypes.Bool'>,
                                }),
                              }),
                              'true_block': dict({
                                <class 'compiler.ast.StatementBlock'>: dict({
                                  'fields': dict({
                                    'stmts': list([
                                      dict({
                                        <class 'compiler.ast.Assignment'>: dict({
                                          'fields': dict({
                                            'rvalue': dict({
                                              <class 'compiler.ast.StringLiteral'>: dict({
                                                'fields': dict({
                                                }),
                                                'type': <class 'compiler.langtypes.String'>,
                                              }),
                                            }),
                                          }),
                                          'type': <class 'compiler.langtypes.String'>,
                                        }),
                                      }),
                                    ]),
                                  }),
                                  'type': <class 'compiler.langtypes.Block'>,
                                }),
                              }),
                            }),
                            'type': <class 'compiler.langtypes.Block'>,
                          }),
                        }),
                      ]),
                    }),
                    'type': <class 'compiler.langtypes.Block'>,
                  }),
                }),
                'if_stmt': dict({
                  <class 'compiler.ast.IfStmt'>: dict({
                    'fields': dict({
                      'cond': dict({
                        <class 'compiler.ast.BoolLiteral'>: dict({
                          'fields': dict({
                          }),
                          'type': <class 'compiler.langtypes.Bool'>,
                        }),
                      }),
                      'true_block': dict({
                        <class 'compiler.ast.StatementBlock'>: dict({
                          'fields': dict({
                            'stmts': list([
                              dict({
                                <class 'compiler.ast.Assignment'>: dict({
                                  'fields': dict({
                                    'rvalue': dict({
                                      <class 'compiler.ast.StringLiteral'>: dict({
                                        'fields': dict({
                                        }),
                                        'type': <class 'compiler.langtypes.String'>,
                                      }),
                                    }),
                                  }),
                                  'type': <class 'compiler.langtypes.String'>,
                                }),
                              }),
                            ]),
                          }),
                          'type': <class 'compiler.langtypes.Block'>,
                        }),
                      }),
                    }),
                    'type': <class 'compiler.langtypes.Block'>,
                  }),
                }),
              }),
              'type': <class 'compiler.langtypes.Block'>,
            }),
          }),
        ]),
      }),
      'type': <class 'compiler.langtypes.Block'>,
    }),
  })
# ---
# name: test_if_stmt_false_literal
  dict({
    <class 'compiler.ast.StatementList'>: dict({
      'stmts': list([
        dict({
          <class 'compiler.ast.VariableDeclaration'>: dict({
            'ident': Token('IDENTIFIER', 'x'),
            'rvalue': dict({
              <class 'compiler.ast.IntLiteral'>: dict({
                'value': 1,
              }),
            }),
          }),
        }),
        dict({
          <class 'compiler.ast.IfChain'>: dict({
            'if_stmt': dict({
              <class 'compiler.ast.IfStmt'>: dict({
                'cond': dict({
                  <class 'compiler.ast.BoolLiteral'>: dict({
                    'value': False,
                  }),
                }),
                'true_block': dict({
                  <class 'compiler.ast.StatementBlock'>: dict({
                    'stmts': list([
                      dict({
                        <class 'compiler.ast.Assignment'>: dict({
                          'lvalue': Token('IDENTIFIER', 'x'),
                          'rvalue': dict({
                            <class 'compiler.ast.IntLiteral'>: dict({
                              'value': 3,
                            }),
                          }),
                        }),
                      }),
                    ]),
                  }),
                }),
              }),
            }),
          }),
        }),
      ]),
    }),
  })
# ---
# name: test_if_stmt_false_literal.1
  dict({
    <class 'compiler.ast.StatementList'>: dict({
      'fields': dict({
        'stmts': list([
          dict({
            <class 'compiler.ast.VariableDeclaration'>: dict({
              'fields': dict({
                'rvalue': dict({
                  <class 'compiler.ast.IntLiteral'>: dict({
                    'fields': dict({
                    }),
                    'type': <class 'compiler.langtypes.Int'>,
                  }),
                }),
              }),
              'type': <class 'compiler.langtypes.Int'>,
            }),
          }),
          dict({
            <class 'compiler.ast.IfChain'>: dict({
              'fields': dict({
                'if_stmt': dict({
                  <class 'compiler.ast.IfStmt'>: dict({
                    'fields': dict({
                      'cond': dict({
                        <class 'compiler.ast.BoolLiteral'>: dict({
                          'fields': dict({
                          }),
                          'type': <class 'compiler.langtypes.Bool'>,
                        }),
                      }),
                      'true_block': dict({
                        <class 'compiler.ast.StatementBlock'>: dict({
                          'fields': dict({
                            'stmts': list([
                              dict({
                                <class 'compiler.ast.Assignment'>: dict({
                                  'fields': dict({
                                    'rvalue': dict({
                                      <class 'compiler.ast.IntLiteral'>: dict({
                                        'fields': dict({
                                        }),
                                        'type': <class 'compiler.langtypes.Int'>,
                                      }),
                                    }),
                                  }),
                                  'type': <class 'compiler.langtypes.Int'>,
                                }),
                              }),
                            ]),
                          }),
                          'type': <class 'compiler.langtypes.Block'>,
                        }),
                      }),
                    }),
                    'type': <class 'compiler.langtypes.Block'>,
                  }),
                }),
              }),
              'type': <class 'compiler.langtypes.Block'>,
            }),
          }),
        ]),
      }),
      'type': <class 'compiler.langtypes.Block'>,
    }),
  })
# ---
# name: test_if_stmt_true_expr
  dict({
    <class 'compiler.ast.StatementList'>: dict({
      'stmts': list([
        dict({
          <class 'compiler.ast.VariableDeclaration'>: dict({
            'ident': Token('IDENTIFIER', 'x'),
            'rvalue': dict({
              <class 'compiler.ast.IntLiteral'>: dict({
                'value': 1,
              }),
            }),
          }),
        }),
        dict({
          <class 'compiler.ast.IfChain'>: dict({
            'if_stmt': dict({
              <class 'compiler.ast.IfStmt'>: dict({
                'cond': dict({
                  <class 'compiler.ast.Equality'>: dict({
                    'left': dict({
                      <class 'compiler.ast.Variable'>: dict({
                        'value': Token('IDENTIFIER', 'x'),
                      }),
                    }),
                    'op': Token('__ANON_3', '=='),
                    'right': dict({
                      <class 'compiler.ast.IntLiteral'>: dict({
                        'value': 1,
                      }),
                    }),
                  }),
                }),
                'true_block': dict({
                  <class 'compiler.ast.StatementBlock'>: dict({
                    'stmts': list([
                      dict({
                        <class 'compiler.ast.Assignment'>: dict({
                          'lvalue': Token('IDENTIFIER', 'x'),
                          'rvalue': dict({
                            <class 'compiler.ast.IntLiteral'>: dict({
                              'value': 3,
                            }),
                          }),
                        }),
                      }),
                    ]),
                  }),
                }),
              }),
            }),
          }),
        }),
      ]),
    }),
  })
# ---
# name: test_if_stmt_true_expr.1
  dict({
    <class 'compiler.ast.StatementList'>: dict({
      'fields': dict({
        'stmts': list([
          dict({
            <class 'compiler.ast.VariableDeclaration'>: dict({
              'fields': dict({
                'rvalue': dict({
                  <class 'compiler.ast.IntLiteral'>: dict({
                    'fields': dict({
                    }),
                    'type': <class 'compiler.langtypes.Int'>,
                  }),
                }),
              }),
              'type': <class 'compiler.langtypes.Int'>,
            }),
          }),
          dict({
            <class 'compiler.ast.IfChain'>: dict({
              'fields': dict({
                'if_stmt': dict({
                  <class 'compiler.ast.IfStmt'>: dict({
                    'fields': dict({
                      'cond': dict({
                        <class 'compiler.ast.Equality'>: dict({
                          'fields': dict({
                            'left': dict({
                              <class 'compiler.ast.Variable'>: dict({
                                'fields': dict({
                                }),
                                'type': <class 'compiler.langtypes.Int'>,
                              }),
                            }),
                            'right': dict({
                              <class 'compiler.ast.IntLiteral'>: dict({
                                'fields': dict({
                                }),
                                'type': <class 'compiler.langtypes.Int'>,
                              }),
                            }),
                          }),
                          'type': <class 'compiler.langtypes.Bool'>,
                        }),
                      }),
                      'true_block': dict({
                        <class 'compiler.ast.StatementBlock'>: dict({
                          'fields': dict({
                            'stmts': list([
                              dict({
                                <class 'compiler.ast.Assignment'>: dict({
                                  'fields': dict({
                                    'rvalue': dict({
                                      <class 'compiler.ast.IntLiteral'>: dict({
                                        'fields': dict({
                                        }),
                                        'type': <class 'compiler.langtypes.Int'>,
                                      }),
                                    }),
                                  }),
                                  'type': <class 'compiler.langtypes.Int'>,
                                }),
                              }),
                            ]),
                          }),
                          'type': <class 'compiler.langtypes.Block'>,
                        }),
                      }),
                    }),
                    'type': <class 'compiler.langtypes.Block'>,
                  }),
                }),
              }),
              'type': <class 'compiler.langtypes.Block'>,
            }),
          }),
        ]),
      }),
      'type': <class 'compiler.langtypes.Block'>,
    }),
  })
# ---
# name: test_if_stmt_true_literal
  dict({
    <class 'compiler.ast.StatementList'>: dict({
      'stmts': list([
        dict({
          <class 'compiler.ast.VariableDeclaration'>: dict({
            'ident': Token('IDENTIFIER', 'x'),
            'rvalue': dict({
              <class 'compiler.ast.IntLiteral'>: dict({
                'value': 1,
              }),
            }),
          }),
        }),
        dict({
          <class 'compiler.ast.IfChain'>: dict({
            'if_stmt': dict({
              <class 'compiler.ast.IfStmt'>: dict({
                'cond': dict({
                  <class 'compiler.ast.BoolLiteral'>: dict({
                    'value': True,
                  }),
                }),
                'true_block': dict({
                  <class 'compiler.ast.StatementBlock'>: dict({
                    'stmts': list([
                      dict({
                        <class 'compiler.ast.Assignment'>: dict({
                          'lvalue': Token('IDENTIFIER', 'x'),
                          'rvalue': dict({
                            <class 'compiler.ast.IntLiteral'>: dict({
                              'value': 3,
                            }),
                          }),
                        }),
                      }),
                    ]),
                  }),
                }),
              }),
            }),
          }),
        }),
      ]),
    }),
  })
# ---
# name: test_if_stmt_true_literal.1
  dict({
    <class 'compiler.ast.StatementList'>: dict({
      'fields': dict({
        'stmts': list([
          dict({
            <class 'compiler.ast.VariableDeclaration'>: dict({
              'fields': dict({
                'rvalue': dict({
                  <class 'compiler.ast.IntLiteral'>: dict({
                    'fields': dict({
                    }),
                    'type': <class 'compiler.langtypes.Int'>,
                  }),
                }),
              }),
              'type': <class 'compiler.langtypes.Int'>,
            }),
          }),
          dict({
            <class 'compiler.ast.IfChain'>: dict({
              'fields': dict({
                'if_stmt': dict({
                  <class 'compiler.ast.IfStmt'>: dict({
                    'fields': dict({
                      'cond': dict({
                        <class 'compiler.ast.BoolLiteral'>: dict({
                          'fields': dict({
                          }),
                          'type': <class 'compiler.langtypes.Bool'>,
                        }),
                      }),
                      'true_block': dict({
                        <class 'compiler.ast.StatementBlock'>: dict({
                          'fields': dict({
                            'stmts': list([
                              dict({
                                <class 'compiler.ast.Assignment'>: dict({
                                  'fields': dict({
                                    'rvalue': dict({
                                      <class 'compiler.ast.IntLiteral'>: dict({
                                        'fields': dict({
                                        }),
                                        'type': <class 'compiler.langtypes.Int'>,
                                      }),
                                    }),
                                  }),
                                  'type': <class 'compiler.langtypes.Int'>,
                                }),
                              }),
                            ]),
                          }),
                          'type': <class 'compiler.langtypes.Block'>,
                        }),
                      }),
                    }),
                    'type': <class 'compiler.langtypes.Block'>,
                  }),
                }),
              }),
              'type': <class 'compiler.langtypes.Block'>,
            }),
          }),
        ]),
      }),
      'type': <class 'compiler.langtypes.Block'>,
    }),
  })
# ---
