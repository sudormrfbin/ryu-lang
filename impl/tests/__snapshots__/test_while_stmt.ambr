# serializer version: 1
# name: test_while_stmt
  dict({
    <class 'compiler.ast.StatementList'>: dict({
      'stmts': list([
        dict({
          <class 'compiler.ast.VariableDeclaration'>: dict({
            'ident': Token('IDENTIFIER', 'x'),
            'rvalue': dict({
              <class 'compiler.ast.IntLiteral'>: dict({
                'value': 5,
              }),
            }),
          }),
        }),
        dict({
          <class 'compiler.ast.WhileStmt'>: dict({
            'cond': dict({
              <class 'compiler.ast.Equality'>: dict({
                'left': dict({
                  <class 'compiler.ast.Variable'>: dict({
                    'value': Token('IDENTIFIER', 'x'),
                  }),
                }),
                'op': Token('__ANON_4', '!='),
                'right': dict({
                  <class 'compiler.ast.IntLiteral'>: dict({
                    'value': 0,
                  }),
                }),
              }),
            }),
            'true_block': dict({
              <class 'compiler.ast.StatementBlock'>: dict({
                'stmts': list([
                  dict({
                    <class 'compiler.ast.Assignment'>: dict({
                      'lvalue': Token('IDENTIFIER', 'x'),
                      'rvalue': dict({
                        <class 'compiler.ast.Term'>: dict({
                          'left': dict({
                            <class 'compiler.ast.Variable'>: dict({
                              'value': Token('IDENTIFIER', 'x'),
                            }),
                          }),
                          'op': Token('MINUS', '-'),
                          'right': dict({
                            <class 'compiler.ast.IntLiteral'>: dict({
                              'value': 1,
                            }),
                          }),
                        }),
                      }),
                    }),
                  }),
                ]),
              }),
            }),
          }),
        }),
      ]),
    }),
  })
# ---
# name: test_while_stmt.1
  dict({
    'stmts': list([
      dict({
        'rvalue': dict({
          <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
        }),
        <class 'compiler.ast.VariableDeclaration'>: <class 'compiler.langtypes.Int'>,
      }),
      dict({
        'cond': dict({
          'left': dict({
            <class 'compiler.ast.Variable'>: <class 'compiler.langtypes.Int'>,
          }),
          'right': dict({
            <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
          }),
          <class 'compiler.ast.Equality'>: <class 'compiler.langtypes.Bool'>,
        }),
        'true_block': dict({
          'stmts': list([
            dict({
              'rvalue': dict({
                'left': dict({
                  <class 'compiler.ast.Variable'>: <class 'compiler.langtypes.Int'>,
                }),
                'right': dict({
                  <class 'compiler.ast.IntLiteral'>: <class 'compiler.langtypes.Int'>,
                }),
                <class 'compiler.ast.Term'>: <class 'compiler.langtypes.Int'>,
              }),
              <class 'compiler.ast.Assignment'>: <class 'compiler.langtypes.Int'>,
            }),
          ]),
          <class 'compiler.ast.StatementBlock'>: <class 'compiler.langtypes.Block'>,
        }),
        <class 'compiler.ast.WhileStmt'>: <class 'compiler.langtypes.Block'>,
      }),
    ]),
    <class 'compiler.ast.StatementList'>: <class 'compiler.langtypes.Block'>,
  })
# ---
