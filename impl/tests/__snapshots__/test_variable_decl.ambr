# serializer version: 1
# name: test_variable_delcaration
  dict({
    <class 'compiler.ast.VariableDeclaration'>: dict({
      'ident': Token('IDENTIFIER', 'x'),
      'rvalue': dict({
        <class 'compiler.ast.IntLiteral'>: dict({
          'value': 1,
        }),
      }),
    }),
  })
# ---
# name: test_variable_delcaration.1
  dict({
    <class 'compiler.ast.VariableDeclaration'>: dict({
      'fields': dict({
        'rvalue': dict({
          <class 'compiler.ast.IntLiteral'>: dict({
            'fields': dict({
            }),
            'type': <class 'compiler.langtypes.Int'>,
          }),
        }),
      }),
      'type': <class 'compiler.langtypes.Int'>,
    }),
  })
# ---
# name: test_variable_delcaration_with_expressions
  dict({
    <class 'compiler.ast.VariableDeclaration'>: dict({
      'ident': Token('IDENTIFIER', 'variable'),
      'rvalue': dict({
        <class 'compiler.ast.Equality'>: dict({
          'left': dict({
            <class 'compiler.ast.Factor'>: dict({
              'left': dict({
                <class 'compiler.ast.IntLiteral'>: dict({
                  'value': 3,
                }),
              }),
              'op': Token('STAR', '*'),
              'right': dict({
                <class 'compiler.ast.IntLiteral'>: dict({
                  'value': 4,
                }),
              }),
            }),
          }),
          'op': Token('__ANON_3', '=='),
          'right': dict({
            <class 'compiler.ast.IntLiteral'>: dict({
              'value': 10,
            }),
          }),
        }),
      }),
    }),
  })
# ---
# name: test_variable_delcaration_with_expressions.1
  dict({
    <class 'compiler.ast.VariableDeclaration'>: dict({
      'fields': dict({
        'rvalue': dict({
          <class 'compiler.ast.Equality'>: dict({
            'fields': dict({
              'left': dict({
                <class 'compiler.ast.Factor'>: dict({
                  'fields': dict({
                    'left': dict({
                      <class 'compiler.ast.IntLiteral'>: dict({
                        'fields': dict({
                        }),
                        'type': <class 'compiler.langtypes.Int'>,
                      }),
                    }),
                    'right': dict({
                      <class 'compiler.ast.IntLiteral'>: dict({
                        'fields': dict({
                        }),
                        'type': <class 'compiler.langtypes.Int'>,
                      }),
                    }),
                  }),
                  'type': <class 'compiler.langtypes.Int'>,
                }),
              }),
              'right': dict({
                <class 'compiler.ast.IntLiteral'>: dict({
                  'fields': dict({
                  }),
                  'type': <class 'compiler.langtypes.Int'>,
                }),
              }),
            }),
            'type': <class 'compiler.langtypes.Bool'>,
          }),
        }),
      }),
      'type': <class 'compiler.langtypes.Bool'>,
    }),
  })
# ---
