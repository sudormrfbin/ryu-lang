# serializer version: 1
# name: test_lexical_scope_variable_shadowing
  dict({
    <class 'compiler.ast.statements.StatementList'>: dict({
      'stmts': list([
        dict({
          <class 'compiler.ast.variable.VariableDeclaration'>: dict({
            'ident': Token('IDENTIFIER', 'x'),
            'rvalue': dict({
              <class 'compiler.ast.literals.StringLiteral'>: dict({
                'value': 'outside',
              }),
            }),
          }),
        }),
        dict({
          <class 'compiler.ast.if_stmt.IfChain'>: dict({
            'if_stmt': dict({
              <class 'compiler.ast.if_stmt.IfStmt'>: dict({
                'cond': dict({
                  <class 'compiler.ast.literals.BoolLiteral'>: dict({
                    'value': True,
                  }),
                }),
                'true_block': dict({
                  <class 'compiler.ast.statements.StatementBlock'>: dict({
                    'stmts': list([
                      dict({
                        <class 'compiler.ast.variable.VariableDeclaration'>: dict({
                          'ident': Token('IDENTIFIER', 'x'),
                          'rvalue': dict({
                            <class 'compiler.ast.literals.StringLiteral'>: dict({
                              'value': 'inside',
                            }),
                          }),
                        }),
                      }),
                    ]),
                  }),
                }),
              }),
            }),
          }),
        }),
      ]),
    }),
  })
# ---
# name: test_lexical_scope_variable_shadowing.1
  dict({
    <class 'compiler.ast.statements.StatementList'>: dict({
      'fields': dict({
        'stmts': list([
          dict({
            <class 'compiler.ast.variable.VariableDeclaration'>: dict({
              'fields': dict({
                'rvalue': dict({
                  <class 'compiler.ast.literals.StringLiteral'>: dict({
                    'fields': dict({
                    }),
                    'type': <class 'compiler.langtypes.String'>,
                  }),
                }),
              }),
            }),
          }),
          dict({
            <class 'compiler.ast.if_stmt.IfChain'>: dict({
              'fields': dict({
                'if_stmt': dict({
                  <class 'compiler.ast.if_stmt.IfStmt'>: dict({
                    'fields': dict({
                      'cond': dict({
                        <class 'compiler.ast.literals.BoolLiteral'>: dict({
                          'fields': dict({
                          }),
                          'type': <class 'compiler.langtypes.Bool'>,
                        }),
                      }),
                      'true_block': dict({
                        <class 'compiler.ast.statements.StatementBlock'>: dict({
                          'fields': dict({
                            'stmts': list([
                              dict({
                                <class 'compiler.ast.variable.VariableDeclaration'>: dict({
                                  'fields': dict({
                                    'rvalue': dict({
                                      <class 'compiler.ast.literals.StringLiteral'>: dict({
                                        'fields': dict({
                                        }),
                                        'type': <class 'compiler.langtypes.String'>,
                                      }),
                                    }),
                                  }),
                                }),
                              }),
                            ]),
                          }),
                        }),
                      }),
                    }),
                  }),
                }),
              }),
            }),
          }),
        ]),
      }),
    }),
  })
# ---
# name: test_lexical_scope_variable_type
  dict({
    <class 'compiler.ast.statements.StatementList'>: dict({
      'stmts': list([
        dict({
          <class 'compiler.ast.variable.VariableDeclaration'>: dict({
            'ident': Token('IDENTIFIER', 'x'),
            'rvalue': dict({
              <class 'compiler.ast.literals.StringLiteral'>: dict({
                'value': 'outside',
              }),
            }),
          }),
        }),
        dict({
          <class 'compiler.ast.if_stmt.IfChain'>: dict({
            'if_stmt': dict({
              <class 'compiler.ast.if_stmt.IfStmt'>: dict({
                'cond': dict({
                  <class 'compiler.ast.literals.BoolLiteral'>: dict({
                    'value': True,
                  }),
                }),
                'true_block': dict({
                  <class 'compiler.ast.statements.StatementBlock'>: dict({
                    'stmts': list([
                      dict({
                        <class 'compiler.ast.variable.VariableDeclaration'>: dict({
                          'ident': Token('IDENTIFIER', 'x'),
                          'rvalue': dict({
                            <class 'compiler.ast.literals.IntLiteral'>: dict({
                              'value': 8,
                            }),
                          }),
                        }),
                      }),
                    ]),
                  }),
                }),
              }),
            }),
          }),
        }),
      ]),
    }),
  })
# ---
# name: test_lexical_scope_variable_type.1
  dict({
    <class 'compiler.ast.statements.StatementList'>: dict({
      'fields': dict({
        'stmts': list([
          dict({
            <class 'compiler.ast.variable.VariableDeclaration'>: dict({
              'fields': dict({
                'rvalue': dict({
                  <class 'compiler.ast.literals.StringLiteral'>: dict({
                    'fields': dict({
                    }),
                    'type': <class 'compiler.langtypes.String'>,
                  }),
                }),
              }),
            }),
          }),
          dict({
            <class 'compiler.ast.if_stmt.IfChain'>: dict({
              'fields': dict({
                'if_stmt': dict({
                  <class 'compiler.ast.if_stmt.IfStmt'>: dict({
                    'fields': dict({
                      'cond': dict({
                        <class 'compiler.ast.literals.BoolLiteral'>: dict({
                          'fields': dict({
                          }),
                          'type': <class 'compiler.langtypes.Bool'>,
                        }),
                      }),
                      'true_block': dict({
                        <class 'compiler.ast.statements.StatementBlock'>: dict({
                          'fields': dict({
                            'stmts': list([
                              dict({
                                <class 'compiler.ast.variable.VariableDeclaration'>: dict({
                                  'fields': dict({
                                    'rvalue': dict({
                                      <class 'compiler.ast.literals.IntLiteral'>: dict({
                                        'fields': dict({
                                        }),
                                        'type': <class 'compiler.langtypes.Int'>,
                                      }),
                                    }),
                                  }),
                                }),
                              }),
                            ]),
                          }),
                        }),
                      }),
                    }),
                  }),
                }),
              }),
            }),
          }),
        ]),
      }),
    }),
  })
# ---
